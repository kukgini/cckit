// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	schema.proto

It has these top-level messages:
	CommercialPaper
	CommercialPaperId
	ExternalId
	CommercialPaperList
	IssueCommercialPaper
	BuyCommercialPaper
	RedeemCommercialPaper
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommercialPaper_State int32

const (
	CommercialPaper_ISSUED   CommercialPaper_State = 0
	CommercialPaper_TRADING  CommercialPaper_State = 1
	CommercialPaper_REDEEMED CommercialPaper_State = 2
)

var CommercialPaper_State_name = map[int32]string{
	0: "ISSUED",
	1: "TRADING",
	2: "REDEEMED",
}
var CommercialPaper_State_value = map[string]int32{
	"ISSUED":   0,
	"TRADING":  1,
	"REDEEMED": 2,
}

func (x CommercialPaper_State) String() string {
	return proto.EnumName(CommercialPaper_State_name, int32(x))
}
func (CommercialPaper_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Commercial Paper state entry
type CommercialPaper struct {
	// Issuer and Paper number comprises composite primary key of Commercial paper entry
	Issuer       string                     `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	PaperNumber  string                     `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber" json:"paper_number,omitempty"`
	Owner        string                     `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	IssueDate    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=issue_date,json=issueDate" json:"issue_date,omitempty"`
	MaturityDate *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=maturity_date,json=maturityDate" json:"maturity_date,omitempty"`
	FaceValue    int32                      `protobuf:"varint,6,opt,name=face_value,json=faceValue" json:"face_value,omitempty"`
	State        CommercialPaper_State      `protobuf:"varint,7,opt,name=state,enum=schema.CommercialPaper_State" json:"state,omitempty"`
	// Additional unique field for entry
	ExternalId string `protobuf:"bytes,8,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
}

func (m *CommercialPaper) Reset()                    { *m = CommercialPaper{} }
func (m *CommercialPaper) String() string            { return proto.CompactTextString(m) }
func (*CommercialPaper) ProtoMessage()               {}
func (*CommercialPaper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *CommercialPaper) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CommercialPaper) GetIssueDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *CommercialPaper) GetMaturityDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *CommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *CommercialPaper) GetState() CommercialPaper_State {
	if m != nil {
		return m.State
	}
	return CommercialPaper_ISSUED
}

func (m *CommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// CommercialPaperId identifier part
type CommercialPaperId struct {
	Issuer      string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	PaperNumber string `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber" json:"paper_number,omitempty"`
}

func (m *CommercialPaperId) Reset()                    { *m = CommercialPaperId{} }
func (m *CommercialPaperId) String() string            { return proto.CompactTextString(m) }
func (*CommercialPaperId) ProtoMessage()               {}
func (*CommercialPaperId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommercialPaperId) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaperId) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

// ExternalId
type ExternalId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ExternalId) Reset()                    { *m = ExternalId{} }
func (m *ExternalId) String() string            { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()               {}
func (*ExternalId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExternalId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Container for returning multiple entities
type CommercialPaperList struct {
	Items []*CommercialPaper `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CommercialPaperList) Reset()                    { *m = CommercialPaperList{} }
func (m *CommercialPaperList) String() string            { return proto.CompactTextString(m) }
func (*CommercialPaperList) ProtoMessage()               {}
func (*CommercialPaperList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommercialPaperList) GetItems() []*CommercialPaper {
	if m != nil {
		return m.Items
	}
	return nil
}

// IssueCommercialPaper event
type IssueCommercialPaper struct {
	Issuer       string                     `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	PaperNumber  string                     `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber" json:"paper_number,omitempty"`
	IssueDate    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate" json:"issue_date,omitempty"`
	MaturityDate *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=maturity_date,json=maturityDate" json:"maturity_date,omitempty"`
	FaceValue    int32                      `protobuf:"varint,5,opt,name=face_value,json=faceValue" json:"face_value,omitempty"`
	// external_id  - once more uniq id of state entry
	ExternalId string `protobuf:"bytes,6,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
}

func (m *IssueCommercialPaper) Reset()                    { *m = IssueCommercialPaper{} }
func (m *IssueCommercialPaper) String() string            { return proto.CompactTextString(m) }
func (*IssueCommercialPaper) ProtoMessage()               {}
func (*IssueCommercialPaper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IssueCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *IssueCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *IssueCommercialPaper) GetIssueDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetMaturityDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *IssueCommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// BuyCommercialPaper event
type BuyCommercialPaper struct {
	Issuer       string                     `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	PaperNumber  string                     `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber" json:"paper_number,omitempty"`
	CurrentOwner string                     `protobuf:"bytes,3,opt,name=current_owner,json=currentOwner" json:"current_owner,omitempty"`
	NewOwner     string                     `protobuf:"bytes,4,opt,name=new_owner,json=newOwner" json:"new_owner,omitempty"`
	Price        int32                      `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	PurchaseDate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=purchase_date,json=purchaseDate" json:"purchase_date,omitempty"`
}

func (m *BuyCommercialPaper) Reset()                    { *m = BuyCommercialPaper{} }
func (m *BuyCommercialPaper) String() string            { return proto.CompactTextString(m) }
func (*BuyCommercialPaper) ProtoMessage()               {}
func (*BuyCommercialPaper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuyCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *BuyCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *BuyCommercialPaper) GetCurrentOwner() string {
	if m != nil {
		return m.CurrentOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BuyCommercialPaper) GetPurchaseDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.PurchaseDate
	}
	return nil
}

// RedeemCommercialPaper event
type RedeemCommercialPaper struct {
	Issuer         string                     `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	PaperNumber    string                     `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber" json:"paper_number,omitempty"`
	RedeemingOwner string                     `protobuf:"bytes,3,opt,name=redeeming_owner,json=redeemingOwner" json:"redeeming_owner,omitempty"`
	RedeemDate     *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=redeem_date,json=redeemDate" json:"redeem_date,omitempty"`
}

func (m *RedeemCommercialPaper) Reset()                    { *m = RedeemCommercialPaper{} }
func (m *RedeemCommercialPaper) String() string            { return proto.CompactTextString(m) }
func (*RedeemCommercialPaper) ProtoMessage()               {}
func (*RedeemCommercialPaper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RedeemCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *RedeemCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemingOwner() string {
	if m != nil {
		return m.RedeemingOwner
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.RedeemDate
	}
	return nil
}

func init() {
	proto.RegisterType((*CommercialPaper)(nil), "schema.CommercialPaper")
	proto.RegisterType((*CommercialPaperId)(nil), "schema.CommercialPaperId")
	proto.RegisterType((*ExternalId)(nil), "schema.ExternalId")
	proto.RegisterType((*CommercialPaperList)(nil), "schema.CommercialPaperList")
	proto.RegisterType((*IssueCommercialPaper)(nil), "schema.IssueCommercialPaper")
	proto.RegisterType((*BuyCommercialPaper)(nil), "schema.BuyCommercialPaper")
	proto.RegisterType((*RedeemCommercialPaper)(nil), "schema.RedeemCommercialPaper")
	proto.RegisterEnum("schema.CommercialPaper_State", CommercialPaper_State_name, CommercialPaper_State_value)
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x6d, 0xb2, 0x4d, 0xda, 0xbd, 0xbb, 0x6d, 0xd7, 0xb1, 0x6a, 0x28, 0xad, 0x8d, 0x11, 0x71,
	0x45, 0x9a, 0x40, 0x0b, 0x82, 0x4f, 0xd2, 0x36, 0xa1, 0x2c, 0x68, 0x95, 0xb4, 0x8a, 0x6f, 0xcb,
	0x6c, 0x32, 0xdd, 0x1d, 0xdc, 0x7c, 0x30, 0x99, 0x74, 0xed, 0xb3, 0x7f, 0xc2, 0x3f, 0xe3, 0xff,
	0xf0, 0x4d, 0xf0, 0x97, 0x48, 0x66, 0xb2, 0x61, 0x13, 0x2a, 0xad, 0x48, 0xdf, 0x32, 0xe7, 0x9e,
	0x7b, 0xe7, 0x9e, 0x33, 0x27, 0xd0, 0xcd, 0x82, 0x09, 0x89, 0xb0, 0x9d, 0xb2, 0x84, 0x27, 0x48,
	0x97, 0xa7, 0xad, 0xdd, 0x71, 0x92, 0x8c, 0xa7, 0xc4, 0x11, 0xe8, 0x28, 0xbf, 0x70, 0x38, 0x8d,
	0x48, 0xc6, 0x71, 0x94, 0x4a, 0xe2, 0xd6, 0xab, 0x31, 0xe5, 0x93, 0x7c, 0x64, 0x07, 0x49, 0xe4,
	0x44, 0x33, 0xca, 0xbf, 0x24, 0x33, 0x67, 0x9c, 0xec, 0x89, 0xe2, 0xde, 0x25, 0x9e, 0xd2, 0x10,
	0xf3, 0x84, 0x65, 0x4e, 0xf5, 0x29, 0xfb, 0xac, 0x6f, 0x2d, 0xd8, 0x38, 0x4e, 0xa2, 0x88, 0xb0,
	0x80, 0xe2, 0xe9, 0x07, 0x9c, 0x12, 0x86, 0x1e, 0x82, 0x4e, 0xb3, 0x2c, 0x27, 0xcc, 0x50, 0x4c,
	0xa5, 0xdf, 0xf6, 0xcb, 0x13, 0x7a, 0x02, 0xdd, 0xb4, 0x20, 0x0c, 0xe3, 0x3c, 0x1a, 0x11, 0x66,
	0xa8, 0xa2, 0xda, 0x11, 0xd8, 0xa9, 0x80, 0xd0, 0x26, 0x68, 0xc9, 0x2c, 0x26, 0xcc, 0x68, 0x89,
	0x9a, 0x3c, 0xa0, 0xd7, 0x00, 0x62, 0xc4, 0x30, 0xc4, 0x9c, 0x18, 0xcb, 0xa6, 0xd2, 0xef, 0xec,
	0x6f, 0xd9, 0x52, 0x92, 0x3d, 0x97, 0x64, 0x9f, 0xcf, 0x25, 0xf9, 0x6d, 0xc1, 0x76, 0x31, 0x27,
	0xe8, 0x0d, 0xac, 0x45, 0x98, 0xe7, 0x8c, 0xf2, 0x2b, 0xd9, 0xad, 0xdd, 0xd8, 0xdd, 0x9d, 0x37,
	0x88, 0x01, 0x3b, 0x00, 0x17, 0x38, 0x20, 0xc3, 0x4b, 0x3c, 0xcd, 0x89, 0xa1, 0x9b, 0x4a, 0x5f,
	0xf3, 0xdb, 0x05, 0xf2, 0xa9, 0x00, 0xd0, 0x01, 0x68, 0x19, 0x2f, 0xe6, 0xae, 0x98, 0x4a, 0x7f,
	0x7d, 0x7f, 0xc7, 0x2e, 0xed, 0x6f, 0x78, 0x62, 0x9f, 0x15, 0x24, 0x5f, 0x72, 0xd1, 0x2e, 0x74,
	0xc8, 0x57, 0x4e, 0x58, 0x8c, 0xa7, 0x43, 0x1a, 0x1a, 0xab, 0x42, 0x2b, 0xcc, 0xa1, 0x41, 0x68,
	0xd9, 0xa0, 0x89, 0x06, 0x04, 0xa0, 0x0f, 0xce, 0xce, 0x3e, 0x7a, 0x6e, 0x6f, 0x09, 0x75, 0x60,
	0xe5, 0xdc, 0x3f, 0x74, 0x07, 0xa7, 0x27, 0x3d, 0x05, 0x75, 0x61, 0xd5, 0xf7, 0x5c, 0xcf, 0x7b,
	0xe7, 0xb9, 0x3d, 0xd5, 0x3a, 0x85, 0x7b, 0x8d, 0x0b, 0x07, 0xe1, 0x7f, 0x3c, 0x83, 0xb5, 0x0d,
	0xe0, 0x55, 0xdb, 0xa0, 0x75, 0x50, 0x69, 0x58, 0x0e, 0x51, 0x69, 0x68, 0xb9, 0x70, 0xbf, 0x71,
	0xdb, 0x5b, 0x9a, 0x71, 0xb4, 0x07, 0x1a, 0xe5, 0x24, 0xca, 0x0c, 0xc5, 0x6c, 0xf5, 0x3b, 0xfb,
	0x8f, 0xfe, 0x62, 0x85, 0x2f, 0x59, 0xd6, 0x0f, 0x15, 0x36, 0x07, 0xc5, 0x46, 0xcd, 0xf8, 0x3c,
	0xae, 0xef, 0x7d, 0xa4, 0xff, 0xfe, 0xb5, 0xab, 0x7e, 0x56, 0xaa, 0xfd, 0x5f, 0x5c, 0xb7, 0x7f,
	0xc5, 0xaa, 0xc5, 0xe9, 0xb0, 0x16, 0x9c, 0xd6, 0x4d, 0x4f, 0x2f, 0x87, 0x98, 0xca, 0x62, 0x80,
	0x4e, 0x9a, 0x01, 0x5a, 0xbe, 0xf5, 0x94, 0x7a, 0x90, 0x9e, 0xd5, 0x82, 0x54, 0xc4, 0x50, 0x93,
	0xcc, 0xde, 0xd2, 0x62, 0xa0, 0x9e, 0xd7, 0xb3, 0xa1, 0xd7, 0xc4, 0x2d, 0x66, 0xe4, 0xbb, 0x0a,
	0xe8, 0x28, 0xbf, 0xba, 0x43, 0xf7, 0x5e, 0xc2, 0x5a, 0x90, 0x33, 0x46, 0x62, 0x3e, 0x5c, 0xf8,
	0x29, 0x2b, 0x6e, 0xb7, 0x2c, 0xbe, 0x17, 0xff, 0xe8, 0x53, 0x68, 0xc7, 0x64, 0x56, 0x12, 0x97,
	0x6b, 0xc4, 0xd5, 0x98, 0xcc, 0x24, 0x69, 0x1b, 0xb4, 0x94, 0xd1, 0xa0, 0x29, 0x5f, 0x82, 0x85,
	0xd5, 0x69, 0xce, 0x82, 0x09, 0xce, 0xca, 0x07, 0xd3, 0x6f, 0x6f, 0xf5, 0xbc, 0xb1, 0xb0, 0xda,
	0xfa, 0xa9, 0xc0, 0x03, 0x9f, 0x84, 0x84, 0x44, 0x77, 0xe8, 0x8e, 0x03, 0x1b, 0x4c, 0xdc, 0x41,
	0xe3, 0xf1, 0xb5, 0xfe, 0xac, 0x57, 0x65, 0x29, 0xfe, 0x18, 0x3a, 0x12, 0xf9, 0xd7, 0x1c, 0x81,
	0x6c, 0x2b, 0xa4, 0x8d, 0x74, 0xc1, 0x3b, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x86, 0x93, 0x97,
	0x11, 0xe7, 0x05, 0x00, 0x00,
}
