package service

// todo:  be autogenerated

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/hyperledger/fabric/msp"
	"github.com/s7techlab/cckit/examples/cpaper_asservice/schema"
	"github.com/s7techlab/cckit/gateway"
	"github.com/s7techlab/cckit/gateway/service"
	"github.com/s7techlab/cckit/router"
	"github.com/s7techlab/cckit/router/param/defparam"
)

// chaincode methods interface
type CPaperChaincode interface {
	List(router.Context, *empty.Empty) (*schema.CommercialPaperList, error)
	Get(router.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
	GetByExternalId(router.Context, *schema.ExternalId) (*schema.CommercialPaper, error)
	Issue(router.Context, *schema.IssueCommercialPaper) (*schema.CommercialPaper, error)
	Buy(router.Context, *schema.BuyCommercialPaper) (*schema.CommercialPaper, error)
	Redeem(router.Context, *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error)
	Delete(router.Context, *schema.CommercialPaperId) (*schema.CommercialPaper, error)
}

func RegisterCPaperChaincode(r *router.Group, cc CPaperChaincode) {

	r.Query(`list`,
		func(ctx router.Context) (interface{}, error) {
			return cc.List(ctx, nil)
		})

	r.Query(`get`,
		func(ctx router.Context) (interface{}, error) {
			return cc.Get(ctx, ctx.Param().(*schema.CommercialPaperId))
		},
		defparam.Proto(&schema.CommercialPaperId{}))

	r.Invoke(`getByExternalId`,
		func(ctx router.Context) (interface{}, error) {
			return cc.GetByExternalId(ctx, ctx.Param().(*schema.ExternalId))
		},
		defparam.Proto(&schema.ExternalId{}))

	r.Invoke(`issue`,
		func(ctx router.Context) (interface{}, error) {
			return cc.Issue(ctx, ctx.Param().(*schema.IssueCommercialPaper))
		},
		defparam.Proto(&schema.IssueCommercialPaper{}))

	r.Invoke(`buy`,
		func(ctx router.Context) (interface{}, error) {
			return cc.Buy(ctx, ctx.Param().(*schema.BuyCommercialPaper))
		},
		defparam.Proto(&schema.BuyCommercialPaper{}))

	r.Invoke(`redeem`,
		func(ctx router.Context) (interface{}, error) {
			return cc.Redeem(ctx, ctx.Param().(*schema.RedeemCommercialPaper))
		},
		defparam.Proto(&schema.RedeemCommercialPaper{}))

	r.Invoke(`delete`,
		func(ctx router.Context) (interface{}, error) {
			return cc.Delete(ctx, ctx.Param().(*schema.CommercialPaperId))
		},
		defparam.Proto(&schema.CommercialPaperId{}))
}

func NewCPaperGateway(ccService service.Chaincode, channel, chaincode string, signer msp.SigningIdentity) *CPaperGateway {
	return &CPaperGateway{Gateway: gateway.NewChaincode(ccService, channel, chaincode, gateway.WithDefaultSigner(signer))}
}

func CPaperApiDef(service *CPaperGateway) gateway.ServiceDef {
	return gateway.ServiceDef{
		Desc:                        &_CPaper_serviceDesc,
		Service:                     service,
		HandlerFromEndpointRegister: RegisterCPaperHandlerFromEndpoint,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type CPaperGateway struct {
	Gateway gateway.Chaincode
}

func (c *CPaperGateway) List(ctx context.Context, in *empty.Empty) (*schema.CommercialPaperList, error) {
	if res, err := c.Gateway.Query(ctx, `List`, []interface{}{}, &schema.CommercialPaperList{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaperList), nil
	}
}

func (c *CPaperGateway) Get(ctx context.Context, in *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	if res, err := c.Gateway.Query(ctx, `Get`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}

func (c *CPaperGateway) GetByExternalId(ctx context.Context, in *schema.ExternalId) (*schema.CommercialPaper, error) {
	if res, err := c.Gateway.Query(ctx, `GetByExternalId`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}

func (c *CPaperGateway) Issue(ctx context.Context, in *schema.IssueCommercialPaper) (*schema.CommercialPaper, error) {
	if err := in.Validate(); err != nil {
		return nil, err
	} else if res, err := c.Gateway.Invoke(ctx, `Issue`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}

func (c *CPaperGateway) Buy(ctx context.Context, in *schema.BuyCommercialPaper) (*schema.CommercialPaper, error) {
	if err := in.Validate(); err != nil {
		return nil, err
	} else if res, err := c.Gateway.Invoke(ctx, `Buy`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}

func (c *CPaperGateway) Redeem(ctx context.Context, in *schema.RedeemCommercialPaper) (*schema.CommercialPaper, error) {
	if err := in.Validate(); err != nil {
		return nil, err
	} else if res, err := c.Gateway.Invoke(ctx, `Redeem`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}

func (c *CPaperGateway) Delete(ctx context.Context, in *schema.CommercialPaperId) (*schema.CommercialPaper, error) {
	if err := in.Validate(); err != nil {
		return nil, err
	} else if res, err := c.Gateway.Invoke(ctx, `Delete`, []interface{}{in}, &schema.CommercialPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*schema.CommercialPaper), nil
	}
}
